{
  "parser": "@typescript-eslint/parser",
  "root": true,
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "plugins": [],
  "extends": [
    "canonical",
    "canonical/jest",
    "canonical/node",
    "canonical/react",
    "canonical/typescript",
    "@ts-strict/eslint-config",
    "prettier",
    "prettier/babel",
    "prettier/prettier",
    "prettier/standard",
    "prettier/unicorn",
    "prettier/react",
    "prettier/@typescript-eslint"
  ],
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/ignore": ["react-native"]
  },
  "env": {
    "es6": true,
    "jest": true,
    "browser": true
  },
  "rules": {
    /* TODO: turn to enable and fix */
    "node/no-process-env": "off",
    "import/no-unassigned-import": "off",
    "@typescript-eslint/no-non-null-assertion": "off", // Replace by suspence

    /* Duplicate */
    // with import/no-extraneous-dependencies
    "node/no-extraneous-import": "off",

    /* These possibly false positives, but are probably bugs that the type system cannot detect. */
    "react-hooks/exhaustive-deps": "warn",
    "no-param-reassign": ["warn", { "props": true }],

    /* prevent false positive */
    "@typescript-eslint/no-magic-numbers": "off",

    /* These complications are necessary for expressiveness */
    "@typescript-eslint/no-type-alias": "off",

    /* Not needed for */
    // typescript
    "react/prop-types": "off",
    "react/forbid-component-props": "off",
    "no-eq-null": "off",
    "eqeqeq": ["error", "always", { "null": "never" }],
    "consistent-return": "off",
    "@typescript-eslint/no-unused-vars": [
      // Ignore `_`
      "error",
      {
        "varsIgnorePattern": "^_$",
        "argsIgnorePattern": "^_$"
      }
    ],
    // private package
    "node/no-unpublished-import": "off",
    // Application
    "promise/prefer-await-to-then": "off",
    "promise/prefer-await-to-callbacks": "off",
    // CSS Loader
    //"import/no-unassigned-import": ["error", { "allow": ["**/*.css"] }],

    /* Styling conventions */
    "@typescript-eslint/quotes": "off",
    // Allow ^_.*$
    "id-match": [
      "error",
      "(^[A-Za-z]+(?:[A-Z][a-z]*)*\\d*$)|(^[A-Z]+(_[A-Z]+)*(_\\d$)*$)|(^(_|\\$).*$)"
    ],
    // Allow *.config.*, *.native.*, ...
    "filenames/match-regex": [
      "error",
      "^[A-Z]?[a-z]+(?:[A-Z][a-z]+)*(\\.[a-z]+)*$",
      false
    ],
    // Custom naming convention
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "objectLiteralProperty",
        "format": [],
        "filter": { "regex": "^__.*__$", "match": true },
        "custom": { "regex": "^__.*__$", "match": true }
      },
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "objectLiteralProperty",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "typeProperty",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },

      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      }
    ]
  },
  "overrides": [
    // For type definitions
    {
      "files": ["**.d.ts"],
      "rules": {
        "unicorn/prevent-abbreviations": "off",
        "import/unambiguous": "off"
      }
    },
    // For config files (js)
    // TODO: ignore all typescript rules
    {
      "files": ["**.js"],
      "rules": {
        "import/unambiguous": "off",
        "import/no-commonjs": "off",
        "filenames/match-regex": "off",
        "node/no-unpublished-require": "off",
        "filenames/match-exported": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-require-imports": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/require-await": "off"
      }
    },
    // For auto generated graphql type definitions (from relay)
    {
      "files": ["**.graphql.ts"],
      "rules": {
        "eslint-comments/no-unlimited-disable": "off",
        "unicorn/no-abusive-eslint-disable": "off",
        "@typescript-eslint/ban-tslint-comment": "off"
      }
    }
  ]
}
